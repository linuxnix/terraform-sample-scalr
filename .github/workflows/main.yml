# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

     

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Checks that all Terraform configuration files adhere to a canonical format
#       - name: Terraform Format
#         run: terraform -v

#     # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform -v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Terraform Validate
#        uses: hashicorp/terraform-github-actions/validate@v0.3.7

#       - name: Terraform Apply
#         run: terraform apply -auto-approve
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TF_ACTION_WORKING_DIR: 'terraform'
#           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: Terraform Destroy
#         run: terraform destroy -auto-approve
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           TF_ACTION_WORKING_DIR: 'terraform'
#           AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          

#       # On push to master, build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#       - name: Terraform Apply
#         if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#         run: terraform apply -auto-approve -input=false
